script(src='../js/palette.js', charset='utf-8')
script(src='../js/source.js', charset='utf-8')
script(src='../js/data.js', charset='utf-8')
script(src='../js/treemap.js', charset='utf-8')
script(src='../js/spreadsheet.js', charset='utf-8')
script(src='../js/tooltip.js', charset='utf-8')
script(src='../js/budget-treemap.js', charset='utf-8')

script.
    var config = {
        /* set values available in dropdown files */
        dropdown_values: {
        "Year": ["FY13", "FY14", "FY15", "FY16", "FY17", "FY18", "FY19", "FY20", "FY21", "FY22"],

        "Account": ["Revenue", "Expense"]
        },
        /* set the default values */
        dropdown_choice: {
        "Year": "FY18",
        "Account": "Expense"
        },
        /* create the url to the data file based on the dropdown choices */
        url: function() {
        return '/data/tree/Approved.' + this.dropdown_choice["Account"] + "." + this.dropdown_choice["Year"] + ".json";
        }
    };
  function _hash_normalize(s) {
    return s.toLowerCase().replace(/\s+/g, '');
  }

  function _hash_compare(v1, v2) {
    return _hash_normalize(v1) == _hash_normalize(v2) ? 0 : 1;
  }

  function _parse_hash(hash) {
    function _parse_hash_dropdown(arr, category) {
      if (arr.length) {
        var x = arr.shift();
        /* see if hash array value matches to dropdown value, and set value
         * it matches */
        var idx = ob.data.findIndex(
          config.dropdown_values[category], x, _hash_compare);
        if (idx > -1) {
          config.dropdown_choice[category] = config.dropdown_values[category][idx];
        }
      }
    }

    var hash_array = hash.split(".");
    _parse_hash_dropdown(hash_array, "Year");
    _parse_hash_dropdown(hash_array, "Account");
    return hash_array.join(".");
  }

  /* need to parse hash on load before creating treemap to make sure we 
   * don't set the dropdown values before reading them from the hash */
  _parse_hash(window.location.hash.replace("#",""));

  /* get width of container */
  var parent = d3.select(".container");
  var width = parent.node().offsetWidth - parseInt(parent.style("padding-left")) - parseInt(parent.style("padding-right"));


  /* create display */
  ob.display.budget_treemap()
    .width(width)
    .height(600)
    .count(40)
    .config(config)
    .dropdown("#dropdown")
    .spreadsheet("#table")
    .treemap("#treemap")
    .title("#title")
    //- .breadcrumbs("#breadcrumbs")
    .hashnorm(_hash_normalize)
    .hashcmp(_hash_compare)
    .on("set_hash", function(hash) {
      /* add year and account to hash for linking */
      var prefix = _hash_normalize(config.dropdown_choice["Year"]) + 
        "." + 
        _hash_normalize(config.dropdown_choice["Account"]);
      return hash.length ? prefix + "." + hash : prefix;
    })
    .on("get_hash", function(hash) { return _parse_hash(hash); })
    .url(config.url())
    .create();
